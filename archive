const PDFDocument = require("pdfkit");
const fs = require("fs");
const pigmentdefs = require("../pigmentdefs");
const path = require('path');
const millfile = path.basename(__filename);
const tools = require("../tools.js");
const [nodepath,codepath,algorithmid="1645417729",seedid="1647279261"] = process.argv;
const prefix = "film";
const colorfile = `pigments_${pigmentchoice}`;
const datetime = new Date();
const timestamp = datetime.getTime();
const datetimestr = datetime.toDateString();
const datetimeISOstr = datetime.toISOString();
const pigments = pigmentdefs.pigments;
console.log(`pigments=${JSON.stringify(pigments)}`);
const pigmentsets = pigmentdefs.pigmentsets;
colorsets = tools.reifyWeightedArray(pigmentsets[pigmentchoice]);
console.log(`colorsets=${colorsets}`);
const fps=24; // frames per second for ffmpeg
const nticks=48; 
let filmdir = `film_${pigmentchoice}_${timestamp}`;
if (!fs.existsSync(filmdir)){
    fs.mkdirSync(filmdir);
}

let colors = tools.shufflearray(colorsets);
let p = {
	width: 1920,
	height: 1080,
	min: 1080,
	max: 1920,
	fsize: 128,
	colors: colors
};
let count = 0;
let numbers = [...Array(10).keys()].map(n=>n.toString());
[...Array(nticks).keys()].reduce( (oldtick, ntick) => {
	if(ntick===nticks-1) {
		layers = algorithms[1].draw(p);
	}
	else {
		let newlayers = algorithms[0].draw(p);
		layers = newlayers.map( (newlayer,j) => {
			return tools.randominteger(0,10)<8 ? newlayer : oldtick[j]; 
		});
	}
	[...Array(fps).keys()].map( (nframe) => {
		file = count.toString().padStart(6, "0") + ".pdf";
		let info = {id:file,timestamp:timestamp,datetimestr:datetimestr,directory:filmdir,npages:nticks,Author:"mctavish",Subject:"generative drawing series",Keywords: "net.art, webs, networks, generative, algorithmic" };
		++count;
		let filmfile = prefix + file; 
		let doc = new PDFDocument(
		{ 
			size: [p.width,p.height],
			info: info,
		});
		doc.pipe(fs.createWriteStream(filmdir+"/"+filmfile));
		doc.rect(0, 0, p.width, p.height).fillColor(pigments.white).fill();
		if(ntick===2 || ntick===nticks-2) {
			layers = algorithms[0].draw(p);
			oldtick = layers;
		}
		layers.forEach( (layer,l) => {
			let oldlayer = oldtick[l];
			layer.rects.forEach( (rect,j) => {
				let oldrect = oldlayer.rects[j];
				let { x, y, width, height, lineWidth, dash, space, strokeOpacity, fillOpacity, strokeColor, fillColor } = tools.tweenParameters(oldrect,rect,fps,nframe);
				if(fillOpacity!==0) {
					doc.rect(x, y, width, height).fillColor(fillColor).fill();
				}
				if(strokeOpacity!==0) {
					doc.rect(x, y, width, height).strokeColor(strokeColor).dash(dash, {space:space}).lineWidth(lineWidth).stroke();
				}
			});
//			if(ntick===nticks-1) {
//				doc.font("Courier-Bold");
//				doc.fontSize(84);
//				let text = `mctavish : ${datetimeISOstr}`;
//				// doc.fillColor(p.colors[tools.randominteger(0,p.colors.length)]).text(text,p.width*.1, p.height*.1);
//				console.log(text); 
//				let color = p.colors[tools.randominteger(0,p.colors.length)];
//				doc.fillOpacity(1.0).strokeOpacity(0.0).fillColor(color).strokeColor(color).text(text,p.width*.1, p.height*.1);
//			}
			layer.lines.forEach( (line,j) => {
				let oldline = oldlayer.lines[j];
				let { x1, x2, y1, y2, lineWidth, dash, space, strokeOpacity, fillOpacity, strokeColor, fillColor } = tools.tweenParameters(oldline,line,fps,nframe);
				doc.moveTo(x1,y1).lineTo(x2,y2).strokeColor(strokeColor).dash(dash, {space:space}).lineWidth(lineWidth).stroke();
			});
			layer.circles.forEach( (circ,j) => {
				let oldcirc = oldlayer.circles[j];
				let { cx, cy, r, lineWidth, dash, space, strokeOpacity, fillOpacity, strokeColor, fillColor } = tools.tweenParameters(oldcirc,circ,fps,nframe);
				if(fillOpacity!==0) {
					doc.circle(cx, cy, r).fillColor(fillColor).fillOpacity(1).fill();	}
				if(strokeOpacity!==0) {
					doc.circle(cx, cy, r).fillOpacity(0).strokeColor(strokeColor).dash(dash, {space:space}).lineWidth(lineWidth).stroke();
				}
			});
		});
		if(text!=="") {
			let opacity=1.0;
			if(count>nticks*fps-10) {
				opacity=0.0+(nticks*fps-count)*0.1;
			}
			else if(count<10) {
				opacity=0.0+count*0.1;
			}
			else {
				opacity=1.0;
			}
			doc.font("Courier-Bold");
			let fsize = p.fsize;
			doc.fontSize(fsize);
			let color = p.colors[tools.randominteger(0,p.colors.length)];
			doc.fillOpacity(opacity).strokeOpacity(opacity).fillColor(pigments.red,opacity).strokeColor(pigments.red,opacity).text(text,p.width*.0,p.height*.3,{align: 'center', width:p.width,height:p.height});
			if(text2!=="") {
				doc.fontSize(fsize*.6);
				// doc.moveDown();
				doc.fillOpacity(opacity).strokeOpacity(opacity).fillColor(pigments.red,opacity).strokeColor(pigments.red,opacity).text(text2,p.width*.0,p.height*.6,{align: 'center', width:p.width,height:p.height});
			}
		}
		doc.end();
	});
	return layers;
},algorithms[1].draw(p));

let nextSteps = "";
let nextstepsfile = text!=="" ? `nextsteps_${text.split(" ")[0]}.sh` : `nextSteps_+${timestamp}.sh`;
nextSteps = nextSteps + `
cd ${filmdir}
for file in *.pdf; do magick convert $file -resize 1920 $file.png; done;
for file in *pdf.png; do mv "$file" "$\{file/.pdf.png/.png\}"; done;
pdfunite film*{24,48,72,96}.pdf book.pdf
ffmpeg -framerate 24 -i film%06d.png -c:v libx264 -r 24 -pix_fmt yuv420p film.mp4
touch ${colorfile}
rm *.png
cd ..
echo "file './${filmdir}/film.mp4'" >> filmfiles.txt 
`;
nextSteps = nextSteps + `
cp ${nextstepsfile} ${filmdir}/nextSteps.sh
cp ${millfile} ${filmdir}/${millfile}
`;
console.log(`gsutil -m cp -r ${filmdir} gs://filmfactory/`);
console.log(`cd ${filmdir}`);
console.log(`bash ${nextstepsfile}`);

fs.writeFileSync(nextstepsfile, nextSteps, (err) => {
  if (err)
    console.log(err);
  else {
    console.log("File written successfully\n");
  }
});
console.log(__filename);
